/*********************************************************************************/
1. 求N!末尾0的数量
2. N!末尾最低位1的位置
/*********************************************************************************/

//Location of last 1 of the factorial in binary
int getLastOne(int n)
{
	int count=0;
	while(n)
	{
		count+=n>>1;
		n>>=1;
	}
	return count+1;
}

//Number of zero at the end of the factorial
//首先考虑，如果N的阶乘为K和10的M次方的乘积，那么N!末尾就有M的0。如果将N的阶乘分解后，那么

N的阶乘可以分解为： 2的X次方，3的Y次方，...5的Z次方，.....的乘积。由于10 = 2 * 5,所以M只
能和X和Z有关，每一对2和5相乘就可以得到一个10，于是M = MIN(X,Z),不难看出X大于Z，因为被2
整除的频率比被5整除的频率高的多。所以可以把公式简化为M=Z.

Z = N/5 + N /(5 * 5) + N/( 5 * 5 * 5).....直到N/(5的K次方)等于0

公式中 N/5表示不大于N的数中能被5整除的数贡献一个5，N/(5 * 5)表示不大于N的数中能被25整除的
数再共享一个5
/*********************************************************************************/

int getNumberOfZero(int n)
{
	int count=0;
	while(n)
	{
		count+=n/5;
		n/=5;
	}
	return count;
}

int main()
{
	cout<<getLastOne(4)<<endl;
	cout<<getNumberOfZero(10);
	return 0;
}
