/*****************************************************************************************/
There is a m*n matrix, a robot start moving at (0,0), and it can move to left, right, up, 
down, but the difference of the row and col cannot more than k. 
Example: input: k=18, (35,37)
output: true;

input: k=18, (35,38)
output: false;
/*****************************************************************************************/

int getSum(int num)
{
	int sum=0;
	while(num> 0)
	{
		sum+=num%10;
		num=num/10;
	}
	return sum;
}

//check row*col
bool check(int threshold, int rowNum, int colNum, int row, int col, bool* visited)
{
	if(row<rowNum && col<colNum && row>=0 && col>=0 && (getSum(row)+getSum(col) <= threshold) && !visited[row*colNum+col])
		return true;
    	return false;
}

//get count of moving
int getMovingCount(int threshold, int rowNum, int colNum, int row, int col, bool* visited)
{
	int count=0;
	if(check(threshold, rowNum, colNum, row, col, visited))
	{
		visited[row*colNum+col]=true;

		count=1+getMovingCount(threshold, rowNum, colNum, row-1, col, visited)
				+getMovingCount(threshold, rowNum, colNum, row, col-1, visited)
				+getMovingCount(threshold, rowNum, colNum, row+1, col, visited)
				+getMovingCount(threshold, rowNum, colNum, row, col+1, visited);
	}

	return count;
}

//main process
int movingCount(int threshold, int rowNum, int colNum)
{
	bool *visited=new bool[rowNum*colNum];

	for(int i=0; i<rowNum*colNum; i++)
		visited[i]=false;

	int count=getMovingCount(threshold, rowNum, colNum, 0, 0, visited);

	return count;
}

int main()
{
	cout<<movingCount(5, 10, 10);
}


