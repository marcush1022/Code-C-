/*****************************************************************************************************/
Get the times of a number appearence in a sorted array.
example: input: {1,2,3,3,3,3,4} 3
output: 4
/*****************************************************************************************************/

class Solution
{
	public:
	int getFirstK(vector<int> &nums, int left, int right, int k)
	{
		if(left>right)
			return -1;
		int len=nums.size();
		int mid=(left+right)/2;

		if(nums[mid]==k)
		{
			if((mid>0 && nums[mid-1]!=k) || (mid==0))
				return mid;
			else
				right=mid-1;
		}
		else if(nums[mid]>k)
			right=mid-1;
		else
			left=mid+1;

		return getFirstK(nums, left, right, k);
	}

	int getLastK(vector<int> &nums, int left, int right, int k)
	{
		if(left>right)
			return -1;
		int len=nums.size();
		int mid=(left+right)/2;

		if(nums[mid]==k)
		{
			if((mid<len-1 && nums[mid+1]!=k) || (mid==len-1))
				return mid;
			else
				left=mid+1;
		}
		else if(nums[mid]>k)
			right=mid-1;
		else
			left=mid+1;

		return getLastK(nums, left, right, k);
	}

	int getTimes(vector<int> &nums, int k)
	{
        int first=getFirstK(nums, 0, nums.size()-1, k);
        int last=getLastK(nums, 0, nums.size()-1, k);
		if(first>0 && last>0)
            return last-first+1;
        else
            return 0;
	}
};

int main()
{
	Solution s;
	vector<int> nums;
	int data[]={1,2,3,3,3,3,4,5};
	for(int i=0; i<8; i++)
		nums.push_back(data[i]);
	cout<<s.getTimes(nums, 6);
	return 0;
}

