/*****************************************************************************************************/
Get the times of a number appearence in a sorted array.
example: input: {1,2,3,3,3,3,4} 3
output: 4
/*****************************************************************************************************/

class Solution
{
public:
	int getFirstK(int *data, int k, int left, int right, int length)
	{
		if(left>right)
			return -1;
		int middleIndex=(left+right)/2;
		int middleNum=data[middleIndex];

		if(middleNum==k)
		{
			if(middleIndex==0 || data[middleIndex-1]!=k && middleIndex>0)
				return middleIndex;
			else
				right=middleIndex-1;
		}
		else if(middleNum>k)
			right=middleIndex-1;
		else
			left=middleIndex+1;
		return getFirstK(data, k ,left, right, length);
	}

	int getLastK(int *data, int k, int left, int right, int len)
	{
		if(left>right)
			return -1;
		int middleIndex=(left+right)/2;
		int middleNum=data[middleIndex];

		if(middleNum==k)
		{
			if(middleIndex==len-1 || data[middleIndex+1]!=k && middleIndex<len-1)
				return middleIndex;
			else
				left=middleIndex+1;
		}
		else if(middleNum>k)
			right=middleIndex-1;
		else
			left=middleIndex+1;
		return getLastK(data, k, left, right, len);
	}

	int getNumK(int *data, int length, int k)
	{
	    int num=0;
		int left=0, right=length-1;
		int first=getFirstK(data, k, left, right, length);
		int last=getLastK(data, k, left, right, length);

        if(length>0 || data!=NULL)
		{
		    if(last>-1 && first>-1)
                num= last-first+1;
		}
		return num;
	}
};


int main()
{
    Solution s;
    int data[]={1,2,3,3,3,4};
    cout<<"!!!!"<<s.getNumK(data, 6, 3);
    return 0;
}
