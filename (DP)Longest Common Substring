/***************************************************************************/
找两个字符串的最长公共连续子串.
Example: str1="a, b, c, f, b, c", str2="a, b, f, c, a, b",
result: "a, b"
/***************************************************************************/

class Solution
{
	public:
	void longestCommonSubstr(string str1, string str2)
	{
		int len1=str1.length();
		int len2=str2.length();
		if(len1==0 || len2==0)
			return ;
		int max=-1, x, y;
		int **c=new int*[len1+1];
		for(int i=0; i<len1+1; i++)
            c[i]=new int[len2+1];
		for(int i=0; i<len1+1; i++)    //第0列都初始化为0
			c[0][i]=0;
		for(int j=0; j<len2+1; j++)
			c[j][0]=0;                     //第0行都初始化为0  

		for(int i=1; i<len1+1; i++)
		{
			for(int j=1; j<len2+1; j++)
			{
				if(str1[i-1]!=str2[j-1])             //只需要跟左上方的c[i-1][j-1]比较
					c[i][j]=0;
				else
					c[i][j]=c[i-1][j-1]+1;
				if(c[i][j]>max)
				{
					max=c[i][j];
					x=i; y=j;
				}
			}
		}//for

		char ret[1000];
		int k=max;
		cout<<"k= "<<k<<endl;
		int i=x-1, j=y-1;
		ret[k--]='\0';
		while(i>=0 && j>=0)
		{
			if(str1[i]==str2[j])
			{
				ret[k--]=str1[i];
				i--;
				j--;
			}
			else
				break;
		}
		for(int i=0; i<max; i++)
			cout<<ret[i];
	}
};


int main()
{
	string str1="caba";
	string str2="bab";
	Solution s;
	s.longestCommonSubstr(str1, str2);
	return 0;
}


class Solution {
public:
    int getLCS(string x, string y)
	{
		int m=x.length();
		int n=y.length();
		if(m==0 || n==0)
			return 0;
		int maxLen=0;
		int c[m+1][n+1];

		for(int i=0; i<n+1; i++)
			c[0][i]=0;
		for(int i=0; i<m+1; i++)
			c[i][0]=0;

		for(int i=1; i<m+1; i++)
		{
			for(int j=1; j<n+1; j++)
			{
				if(x[i]==y[j])
					c[i][j]=c[i-1][j-1]+1;
				else if(c[i-1][j]>=c[i][j-1])
					c[i][j]=c[i-1][j];
				else
					c[i][j]=c[i][j-1];

				if(c[i][j]>maxLen)
					maxLen=c[i][j];
			}
		}
		return maxLen;
	}
};





