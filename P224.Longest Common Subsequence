/************************************************************************************************/
Get the longest common subsequence of two string.
Example: input: str1="ABCBDAB", str2="BDCABA";
Output: "BCBA"
/************************************************************************************************/

class Solution
{
public:
	int LCSlength(string &str1, string &str2)
	{
		int len1=str1.length();
		int len2=str2.length();
		stack<char > res;

		int arr[50][50]={{0, 0}};

		for(int i=1; i<=len1; i++)
		{
			for(int j=1; j<=len2; j++)
			{
				if(str1[i-1] == str2[j-1])
				{
					arr[i][j]=arr[i-1][j-1]+1;
				}
				else
				{
					if(arr[i][j-1] >= arr[i-1][j])
						arr[i][j]=arr[i][j-1];
					else
						arr[i][j]=arr[i-1][j];
				}
			}
		}
		for(int i=0; i<=len1; i++)
        {
            for(int j=0; j<=len2; j++)
                cout<<arr[i][j];
            cout<<endl;
        }

        for(int i=len1, j=len2; i>=1 && j>=1;)
        {
            if(str1[i-1]==str2[j-1])
            {
                res.push(str1[i-1]);
                i--;
                j--;
            }
            else if(arr[i][j-1]>arr[i-1][j])
                j--;
            else
                i--;
        }

        cout<<"stk";
        while(!res.empty())
        {
            cout<<res.top();
            res.pop();
        }

	}//LCS




};

int main()
{
    Solution s;
    string str1="ABCBDAB";
    string str2="BDCABA";
    s.LCSlength(str1, str2);
}

