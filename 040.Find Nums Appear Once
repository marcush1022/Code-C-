/****************************************************************************************************/
In a int array, except two numbers appear once, each numbers appear twice.
Find these two numbers.
Example: arrary={2, 4, 3, 6, 3, 2, 5, 5}
output: 4,6
/****************************************************************************************************/

class Solution
{
	public:

	unsigned int findFirst1(int num)
	{
		int index=0;
		while (((num & 1) == 0) && (index < 8 * sizeof(int)))
		{
			num=num >> 1;
			++index;
		}
		return index;
	}

	bool isBit1(int num,unsigned int index)
	{
		num=num >> index;
		return (num&1);
	}

	void findNumAppearOnce(int data[], int length, int *ret1, int *ret2)
	{
		if(data==NULL || length<2)
			return ;

		int XOR=0;


		for(int i=0; i<length; ++i)
			XOR ^=data[i];

		unsigned int indexOf1=findFirst1(XOR);

        *ret1 = *ret2=0;
		for(int j=0; j<length; ++j)
		{
			if(isBit1(data[j], indexOf1))
				*ret1 ^=data[j];
			else
				*ret2 ^=data[j];
		}
	}

};


int main()
{
	int data[] = {2, 4, 3, 6, 3, 2, 5, 5};
	int ret1, ret2;
	Solution s;
	s.findNumAppearOnce(data, 8, &ret1, &ret2);
	cout<<ret1<<","<<ret2;
	return 0;
}
