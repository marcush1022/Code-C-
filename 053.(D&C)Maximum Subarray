class Solution {
    public:
		int doDivide(vector<int>& A, int left, int right)
		{
			if(left>right)
				return 0;
			if(left==right)
				return A[left];
			
			
			int mid=left+(right-left)/2;
			
			//divide left
			int sum=0;
			int leftMax=A[mid];
			for(int i=mid; i>=left; i--)
			{
				sum=sum+A[i];
				if(sum>leftMax)
					leftMax=sum;
			}
			
			//divide right
			sum=0;
			int rightMax=A[mid+1];
			for(int i=mid+1; i<=right; i++)
			{
				sum=sum+A[i];
				if(sum>rightMax)
					rightMax=sum;
			}
			
			int aMax=doDivide(A, left, mid);
			int bMax=doDivide(A, mid+1, right);
			//divide cross mid
			
			int cMax=leftMax+rightMax;
			
			return max(max(aMax, bMax), cMax);
			
		}
		
		int maxSubArray(vector<int>& nums)
		{
			int left=0;
			int right=nums.size()-1;
			return doDivide(nums, left, right);
			
		}
    };
