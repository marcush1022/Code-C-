/****************************************************************************************/
Add an assignment operator function for class CMyString.
/****************************************************************************************/

class CMyString
{
	public:
	CMyString(char* pData=NULL);
	CMyString(const CMyString &str);
	~CMyString();

	CMyString& operator=(const CMyString &str);

	void print();

	private:
	char* m_pData;
};

//CMyString(char* pData=NULL);
CMyString::CMyString(char *pData)
{
    if(pData==NULL)
    {
        m_pData=new char[1];
        m_pData='\0';
    }
    else
    {
        int len=strlen(pData);
        m_pData=new char[len+1];
        strcpy(m_pData, pData);
    }
}

//CMyString(const CMyString &str);
CMyString::CMyString(const CMyString &str)
{
	int len=strlen(str.m_pData);
	m_pData=new char[len+1];
	strcpy(m_pData, str.m_pData);
}

CMyString::~CMyString()
{
	delete[] m_pData;
}

void CMyString::print()
{
	printf("%s", m_pData);
}

CMyString& CMyString::operator =(const CMyString &str)
{
	if(this==&str)
		return *this;
		
	delete []m_pData;
	m_pData=NULL;

	m_pData=new char[strlen(str.m_pData)+1];
	strcpy(m_pData, str.m_pData);

	return *this;
}

int main()
{
	char* s="abc";
	cout<<"s= ";
	printf("%s", s);

	cout<<endl;
	CMyString str1(s);
	CMyString str2;
	CMyString str3;

	//str2=str1;
	// 赋值给自己
	//str1=str1;

  	//连续赋值
	str3=str2=str1;

    	cout<<"str2= ";
    	str2.print();
    	cout<<endl;
    	cout<<"str3= ";
	str3.print();
}
